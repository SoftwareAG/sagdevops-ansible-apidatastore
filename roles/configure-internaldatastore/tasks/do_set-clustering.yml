---

  - name: fail if mandatory_item not specified
    fail: 
      msg: "mandatory item not provided...cannot do anything."
    when: mandatory_item is not defined or mandatory_item == ""
    with_items:
      - "{{ ids_coordinators_inventory_pattern }}"
      - "{{ ids_node_master }}"
      - "{{ ids_node_data }}"
      - "{{ ids_node_ingest }}"
    loop_control:
      loop_var: mandatory_item

########### get FQDNs for the discovery seeds
  - import_role: 
      name: get-inventory-hosts
    vars:
      inventory_pattern: "{{ ids_coordinators_inventory_pattern }}"
      inventory_action: second_level_lookup
      inventory_hosts_property: ansible_default_ipv4
      inventory_hosts_property_2ndlevel: address
      inventory_hosts_clear_first: true
      inventory_hosts_add_prefix: ""
      inventory_hosts_add_suffix: ":{{ ids_transport_tcp_port }}"
    when: ids_discovery_seed_by_fqdns|default()|bool == false
  
  - import_role: 
      name: get-inventory-hosts
    vars:
      inventory_pattern: "{{ ids_coordinators_inventory_pattern }}"
      inventory_action: first_level_lookup
      inventory_hosts_property: "ansible_fqdn"
      inventory_hosts_property_2ndlevel: ""
      inventory_hosts_clear_first: true
      inventory_hosts_add_prefix: ""
      inventory_hosts_add_suffix: ":{{ ids_transport_tcp_port }}"
    when: ids_discovery_seed_by_fqdns|default()|bool

  - name: Set ids_discovery_seed_hosts facts
    set_fact:
      ids_discovery_seed_hosts: "{{ output_inventory_hosts }}"
    
  - debug: var=ids_discovery_seed_hosts verbosity=1

########### setup the general config

  ## the node name must be the current server's FQDN 
  ## (as it has to match the array ids_cluster_initial_master_nodes which will have the list of all the master nodes FQDNs)
  - name: Set current node name
    set_fact:
      ids_current_node_name: "{{ ansible_fqdn }}"

  - name: Set node configs
    set_fact:
      ids_cfgs:
        cluster.name: "{{ ids_cluster_name }}"
        node.name: "{{ ids_current_node_name }}"
        network.host: "{{ ids_network_host }}"
        transport.tcp.port: "{{ ids_transport_tcp_port }}"
        http.port: "{{ ids_http_port }}"
        path.data: "{{ ids_path_data }}"
        path.logs: "{{ ids_path_logs }}"
        path.repo: "{{ ids_path_archives }}"
        discovery.seed_hosts: "{{ ids_discovery_seed_hosts }}"
        node.master: "{{ ids_node_master }}"
        node.data: "{{ ids_node_data }}"
        node.ingest: "{{ ids_node_ingest }}"
        xpack.ml.enabled: false
        xpack.security.enabled: false

########### if master node

  - name: if node type is a master node
    block:
        
      #get FQDNs for the ids_cluster_initial_master_nodes
      - import_role: 
          name: get-inventory-hosts
        vars:
          inventory_pattern: "{{ ids_coordinators_inventory_pattern }}"
          inventory_action: first_level_lookup
          inventory_hosts_property: "ansible_fqdn"
          inventory_hosts_property_2ndlevel: ""
          inventory_hosts_clear_first: true
          inventory_hosts_add_prefix: ""
          inventory_hosts_add_suffix: ""

      - name: Set ids_cluster_initial_master_nodes facts
        set_fact:
          ids_cluster_initial_master_nodes: "{{ output_inventory_hosts }}"

      - debug: var=ids_cluster_initial_master_nodes verbosity=1

      - name: Add initial_master_nodes to the main config
        set_fact:
          ids_cfgs: "{{ ids_cfgs | combine({ 'cluster.initial_master_nodes': ids_cluster_initial_master_nodes }, recursive=True) }}"

    when: ids_node_master | default() | bool

########### end if master node

  - debug: var=ids_cfgs verbosity=1

  - name: Write the config for a InternalDataStore node
    template:
      src: elasticsearch_conf.yml.j2
      dest: "{{ ids_install_elasticsearch_file }}"
      backup: yes
      owner: "{{ webmethods_user }}"
      group: "{{ webmethods_group }}"
      mode: 0644

  - name: clear facts
    set_fact:
      output_inventory_hosts: []
      ids_discovery_seed_hosts: []
      ids_cluster_initial_master_nodes: []
      ids_current_node_name: ""
      ids_cfgs: {}